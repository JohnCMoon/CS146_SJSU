https://github.com/ldfaiztt/CSE332/tree/master/Project%201

//FORBIDDEN java.util

/**
 * This class encapsulates a basic music
 * library. It uses a binary search tree to store
 * albums. It's like a TreeMap. The key into the tree 
 * is a String, the name of the album. The value is
 * the actual album itself.
 * 
 * You must implement a binary search tree in order
 * to get any credit for this homework. You may not 
 * use data structures from the jcf to complete this
 * class. You may not add additional instance variables
 * to this class. 
 */
public class MusicLibrary
{
	AlbumNode root;

	/**
	 * Constructor.
	 */
	public MusicLibrary()
	{
		root = null;
	}
	
	/**
	 * addAlbum. Add an album to the tree.
	 * Use a recursive helper method. The albums
	 * in the tree should be ordered based on
	 * the name of the album, NOT the artist.
	 * 
	 * @param a the AlbumNode to add
	 */
	public void addAlbum(AlbumNode a) 
	{
		// YOUR CODE HERE
		if (root != null)
		{
			add(a, root);
		}
		else
		{
			root = a;
		}
	}
	private void add(AlbumNode a, AlbumNode tree) 
	{
		int comp = a.getName().compareTo(tree.getName());
		if (comp < 0) 
		{
			if (tree.left != null)
			{
				add(a, tree.left);
			}
			else
			{
				tree.left = a;
			}
		}
		else if (comp > 0) 
		{
			if (tree.right != null)
			{
				add(a, tree.right);
			}
			else
			{
				tree.right = a;
			}
		}
	}
	
	/**
	 * getAlbum. Return an Album from the tree
	 * if it exists, or null otherwise.
	 * Use a recursive helper method.
	 * 
	 * @param albumName the name of the album to return
	 * @return an Album or null
	 */
	public AlbumNode getAlbum(String albumName) 
	{
		AlbumNode newNode = new AlbumNode("a", albumName);
		if (root == null)
		{
			return null;
		}
		else 
		{
			return contains(newNode, root);
		}
	}

	private AlbumNode contains(AlbumNode a, AlbumNode tree) 
	{
		int comp = a.getName().compareTo(tree.getName());
		if (comp == 0)
		{
			return tree;
		}
		else if (comp < 0) 
		{
			if (tree.left == null)
			{
				return null;
			}
			else
			{
				return contains(a, tree.left);
			}
		} 
		else 
		{
			if (tree.right == null)
			{
				return null;
			}
			else
			{
				return contains(a, tree.right);
			}
		}
	}
	
	/**
	 * count. Return the size of the library. Use
	 * a recursive helper method.
	 * 
	 * @return an int
	 */
	public int count() 
	{
		// YOUR CODE HERE
		return (count(root));
	}
	private int count(AlbumNode size) 
	{
		int i = 1;
		
		if(size == null)
		{
			return 0;
		}
		else 
		{
			int left = count(size.left);
			int right = count(size.right);
			
			return (left + i + right);
		}
	}
	
	/**
	 * printInOrder. Print the list of albums
	 * in the MusicLibrary in order based on name.
	 * Print each album on its own line.
	 * Use a recursive helper method. Use the
	 * toString method in the AlbumNode class
	 * to print each album.
	 */
	public void printInOrder() 
	{
		// YOUR CODE HERE
		printInOrder(root);
	}
	private void printInOrder(AlbumNode name) 
	{
		if (name.left != null) 
		{
			printInOrder(name.left);
		}

		System.out.println(name.toString());

		if (name.right != null) 
		{
			printInOrder(name.right);
		}
	}

	/**
	 * printInReverseOrder. Print the list of albums
	 * in the MusicLibrary in reverse order based on name.
	 * Use a recursive helper method.
	 */
	public void printInReverseOrder() 
	{
		// YOUR CODE HERE
		printInReverseOrder(root);
	}
	private void printInReverseOrder(AlbumNode name) 
	{
		if (name.right != null) 
		{
			printInReverseOrder(name.right);
		}

		System.out.println(name.toString());

		if (name.left != null) 
		{
			printInReverseOrder(name.left);
		}
	}
}